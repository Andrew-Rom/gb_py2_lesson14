"""
HW 14
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å)
üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest (–∏–ª–∏ unittest –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
üìå –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
"""

from hw14_user import User
from hw14_logIn import Loger, PATH
import pytest


@pytest.fixture
def data():
    test_name = 'John Doe'
    test_id = 10
    test_level = 5
    return test_name, test_id, test_level


@pytest.fixture
def get_loger():
    return Loger(PATH)


@pytest.fixture
def invalid_name(data):
    test_name, test_id, test_level = data
    test_name = None
    return test_name, test_id, test_level


@pytest.fixture
def invalid_id(data):
    test_name, _, test_level = data
    test_id = -100
    return test_name, test_id, test_level


@pytest.fixture
def invalid_level(data):
    test_name, test_id, _ = data
    test_level = -100
    return test_name, test_id, test_level


@pytest.fixture
def invalid_level(data):
    test_name, test_id, _ = data
    test_level = -100
    return test_name, test_id, test_level


def test_user_creator(data):
    user = User(*data)
    assert user.__str__() == 'John Doe, 10, 5'


def test_invalid_name_exception(invalid_name):
    with pytest.raises(ValueError, match=r'–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞'):
        User(*invalid_name)


def test_invalid_id_exception(invalid_id):
    with pytest.raises(ValueError, match=r'–õ–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'):
        User(*invalid_id)


def test_invalid_level_exception(invalid_level):
    with pytest.raises(ValueError, match=r'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 7'):
        User(*invalid_level)


def test_users_identity(data):
    first_user = User(*data)
    second_user = User(*data)
    second_user.level = second_user.level - 1
    assert first_user == second_user


def test_users_non_identity(data):
    first_user = User(*data)
    second_user = User(*data)
    second_user.the_id = second_user.the_id + 1
    assert first_user != second_user


def test_user_auth(get_loger):
    assert get_loger.authorize(4, 'Jane Doe') == 3


def test_add_user(get_loger):
    get_loger.authorize(4, 'Jane Doe')
    with pytest.raises(Exception, match=r'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞'):
        get_loger.add_user('Mad Max', 7, 1)


if __name__ == '__main__':
    pytest.main(['-v'])
